/*
 * Copyright (c) 2008, AIST, the University of Tokyo and General Robotix Inc.
 * All rights reserved. This program is made available under the terms of the
 * Eclipse Public License v1.0 which accompanies this distribution, and is
 * available at http://www.eclipse.org/legal/epl-v10.html
 * Contributors:
 * National Institute of Advanced Industrial Science and Technology (AIST)
 * General Robotix Inc. 
 */
#ifndef OPENHRP_VIEW_SIMULATOR_IDL_INCLUDED
#define OPENHRP_VIEW_SIMULATOR_IDL_INCLUDED

/** @file ViewSimulator/corba/ViewSimulator.idl
 * @if jp
 * ViewSimulator インターフェース定義
 * @else
 * ViewSimulator Interfece Definition
 * @endif
 * @author	Ichitaro Kohara, MSTC
 * @version	1.0
 * @date	2001.02.22
 */

#include "OpenHRPCommon.idl"


module OpenHRP {

  /**
   * @if jp
   * 画像フォーマット
   * @else
   * Image Data
   * @endif
   */
  enum PixelFormat {ARGB, // 4byte/pixel
		    GRAY, // 1byte/pixel
		    DEPTH,// 4byte/pixel
		    RGB}; // 3byte/pixel

  /**
   * @if jp
   * 画像データ
   * @endif
   */
  struct ImageData
  {
    /**
     * @if jp
     * フォーマット
     * @endif
     */
    PixelFormat format;

    /**
     * @if jp
     * 画像の幅
     * @endif
     */
    long width;

    /**
     * @if jp
     * 画像の高さ
     * @endif
     */
    long height;

    /**
     * @if jp
     * octet での画像データ
     * @endif
     */
    sequence<octet> octetData;

    /**
     * @if jp
     * long での画像データ
     * @endif
     */
    sequence<long> longData;

    /**
     * @if jp
     * float での画像データ
     * @endif
     */
    sequence<float> floatData;
  };

  /**
   * @if jp
   * カメラ
   * @author	Ichitaro Kohara, MSTC
   * @version	1.0(2001.02.16)
   * @else 
   * Camera
   * @author	Ichitaro Kohara, MSTC
   * @version	1.0(2001.02.16)
   * @endif
   */
  interface Camera
  {
    /**
     * @if jp
     * カメラ種別
     * @else
     * Camera type
     * @endif
     */
    enum CameraType {
      NONE, 		//!< read no information
      COLOR, 		//!< read color buffer
      MONO, 
      DEPTH, 		//!< read depth buffer
      COLOR_DEPTH,	//!< read color buffer and depth buffer
      MONO_DEPTH
    };

    /**
     * @if jp
     * カメラパラメタ
     * @else
     * Camera parameter
     * @endif
     */
    struct CameraParameter
    {
      /**
       * @if jp
       * カメラ種別
       * @else
       * camera type
       * @endif
       */
      CameraType	type;

      /**
       * @if jp
       * キャラクタの正面からの距離[m]
       * @else
       * view model's front clip distance[m]
       * @endif
       */
      float	frontClipDistance; 

      /**
       * @if jp
       * キャラクタの後面までの距離[m]
       * @else
       * view model's back clip distance[m] 
       * @endif
       */
      float	backClipDistance; 

      /**
       * @if jp
       * 視野角[rad]
       * @else
       * fields of view[rad]  
       * @endif
       */
      float	fieldOfView;

      /**
       * @if jp
       * センサID
       * @else
       * sensor id
       * @endif
       */
      long	sensorId;

      /**
       * @if jp
       * センサ名
       * @else
       * sensor name
       * @endif
       */
      string	sensorName;

      /**
       * @if jp
       * ノード宣言の名前
       * @else
       * DEF name
       * @endif
       */
      string	defName;

      /**
       * @if jp
       * 幅
       * @else
       * width
       * @endif
       */
      long	width;

      /**
       * @if jp
       * 高さ
       * @else
       * height
       * @endif
       */
      long	height;

      /**
       * @if jp
       * フレームレート[fps]
       * @else
       * frame rate[fps]
       * @endif 
       */
      float     frameRate;
    };

    /**
     * @if jp
     * サーバを終了します。
     * @else
     * Destroy
     * @endif
     */
    void
    destroy();

    /**
     * @if jp
     * カメラパラメタを取得します。
     * @return カメラパラメタ
     * @else
     * Get camera parameter
     * @return	camera parameter
     */
    CameraParameter
    getCameraParameter();

    /**
     * @if jp
     * イメージを取得します。
     * @endif
     */
    ImageData
    getImageData();
  };

  /**
   * @if jp
   * カメラ配列
   * @else
   * Sequence of Camera
   * @endif
   */
  typedef sequence<Camera>	CameraSequence;

  /**
   * @if jp
   * @brief ViewSimulator インターフェース
   *
   * カメラとそれから取得できる画像をシミュレーションします。
   *
   * Controllerからは以下の手順で使用できます。
   * メンバ visionSensor_ にセットされた ViewSimulator に対して、
   * 
   * -# ViewSimulator::getCameraSequenceOf を使用して Camera を取得します。
   * -# Camera::getCameraParameter から取得される CameraParameter で各種情報を調べます。
   *
   * 以下、シミュレーションループ
   *
   * -# Camera::getImageData で ImageDataを取得します。
   * -# このカメラのフォーマットにしたがい、ImageData::longData 等から画像を取得します。
   *
   * @author	Ichitaro Kohara, MSTC
   * @version	1.0(2001.02.22)
   * @else
   * Vision Sensor
   * @author	Ichitaro Kohara, MSTC
   * @version	1.0(2001.02.22)
   * @endif
   */
  interface ViewSimulator
  {
    /**
     * @if jp
     * ViewSimulator 例外
     * @else
     * ViewSimulator exception
     * @endif
     */
    exception ViewSimulatorException
    {
      /**
       * @if jp
       * @brief 例外の詳細
       * @endif
       */
      string	description; //!< description of the exception
    };

    /**
     * @if jp
     * サーバを終了します。
     * @else
     * Destory
     * @endif
     */
    void destroy();

    /**
     * @if jp
     * モデルを読み込みます。
     * @param src キャラクタのモデルファイルURL
     * @param objectName キャラクタ名
     * @else
     * Loat object
     * @param	src			object's URL
     * @param	objectName	object's Name
     * @endif
     */
    void
    loadObject(
	       in	string	src,
	       in	string	objectName
	       )
      raises (ViewSimulatorException);

    /**
     * @if jp
     * シミュレータにあるカメラを取得します。
     * @param cameras カメラ配列
     * @return カメラの台数
     * @else
     * Get cameras loaded in simulator
     * @param	cameras		cameras
     * @return	number of cameras
     * @endif
     */
    void getCameraSequence(out	CameraSequence	cameras);

    /**
     * @if jp
     * キャラクタにあるカメラを取得します。
     * @param objectName キャラクタ名
     * @param cameras カメラ配列
     * @endif
     */
    void getCameraSequenceOf(in string objectName,
			     out CameraSequence cameras);

    /**
     * @if jp
     * シーンを更新します。
     * @param state 新しい WorldState
     * @else
     * Update scene
     * @param	state	WorldState
     * @endif
     */
    void
    updateScene(
		in	WorldState	state
		);
  };

  /**
   * ViewSimulatorファクトリインタフェイス
   */
  interface ViewSimulatorFactory : ServerObject
  {

    /**
     * ViewSimulator を生成します。
     *
     * @return  ViewSimulatorオブジェクト
     */
    ViewSimulator create();

  };

};

#endif
